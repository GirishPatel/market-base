// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brands")
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  productTags ProductTag[]

  @@map("tags")
}

model Product {
  id                    Int          @id @default(autoincrement())
  categoryId            Int
  brandId               Int
  sku                   String       @unique
  title                 String
  description           String       @db.Text
  price                 Float
  discountPercentage    Float        @default(0)
  rating                Float        @default(0)
  stock                 Int
  minimumOrderQuantity  Int          @default(1)
  weight                Float?
  dimensions            Json?
  warrantyInformation   String?
  shippingInformation   String?
  availabilityStatus    String       @default("In Stock")
  returnPolicy          String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  barcode               String?
  qrCode                String?
  images                Json?
  thumbnail             String?
  
  category              Category     @relation(fields: [categoryId], references: [id])
  brand                 Brand        @relation(fields: [brandId], references: [id])
  reviews               Review[]
  productTags           ProductTag[]

  @@index([categoryId])
  @@index([brandId])
  @@map("products")
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  rating     Float
  comment    String   @db.Text
  date       DateTime @default(now())
  reviewerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviewer User    @relation(fields: [reviewerId], references: [id])

  @@index([productId])
  @@index([reviewerId])
  @@map("reviews")
}

model ProductTag {
  productId Int
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
  @@map("product_tags")
}